t1p_t* t1p_meet(ap_manager_t* man, bool destructive, t1p_t* a1, t1p_t* a2)
/* TODO: destructive not used */
{
/*ap_interval_t** int1=t1p_to_box(man, a1);
ap_interval_t** int2=t1p_to_box(man, a2);

ap_manager_t* man_box = box_manager_alloc();

box_t* box1=box_of_box(man_box, 0, 2, int1);
box_t* box2=box_of_box(man_box, 0, 2, int2);

box_t* bxmeet=box_meet(man_box, true , box1, box2);
if (box_is_bottom(man_box, bxmeet)) {
   t1p_t* bot=t1p_bottom(man, 0, 2);
   return bot;}
else{*/
    CALL();
    t1p_internal_t* prbx1 = t1p_init_from_manager(man,AP_FUNID_MEET);
    num_t num2;
num_init(num2);
num_set_double(num2, 0.4);
num_t num4;
num_init(num4);
num_set_double(num4, 0.6);

int size,size1,size2;

//printf("%u", a1->paf[0]->end->pnsym->index);
//printf("%u", a1->paf[1]->end->pnsym->index);
//printf("%u", a2->paf[0]->end->pnsym->index);
//printf("%u", a2->paf[1]->end->pnsym->index);

//itv_print(a1->paf[0]->end->coeff);
//itv_print(a1->paf[1]->end->coeff);
//itv_print(a2->paf[0]->end->coeff);
//itv_print(a2->paf[1]->end->coeff);

if (a1->paf[0]->end->pnsym->index >= a1->paf[1]->end->pnsym->index)
   size1=a1->paf[0]->end->pnsym->index+1;
else
   size1=a1->paf[1]->end->pnsym->index+1;
if (a2->paf[0]->end->pnsym->index >= a2->paf[1]->end->pnsym->index)
   size2=a2->paf[0]->end->pnsym->index+1;
else
   size2=a2->paf[1]->end->pnsym->index+1;

size=size1+size2;

    //printf("%u", 2*prbx1->dim);

printf("%u", size);

itv_t** ptitv2[a1->dims][size1];
itv_t** ptitv4[a2->dims][size2];
t1p_aff_get_gen_num(size1, a1, ptitv2,num2);
t1p_aff_get_gen_num(size2, a2, ptitv4,num4);
itv_t** ptitv3[a1->dims][size];

int i,j;


for (i=0;i<a1->dims;i++){
   for (j=0;j<size;j++){
       if (j>=(size1)){
            ptitv3[i][j]=ptitv4[i][j-2];
            //itv_print(ptitv3[i][j]);
       }
       else {
       ptitv3[i][j]=ptitv2[i][j];
       //itv_print(ptitv3[i][j]);
}
       //itv_print(ptitv[i][j]);
     }
}

//itv_print(ptitv3[0][2]);

//int k=2*prbx1->dim;
prbx1->dim=0;

//printf("%u",prbx1->dim);

t1p_t* tpmeet = t1p_alloc(man,0,2);
tpmeet->paf[0] = t1p_aff_alloc_init(prbx1);
tpmeet->paf[1] = t1p_aff_alloc_init(prbx1);

t1p_nsym_t** nsymeet1[size];
//for (i=0;i<tb->dims;i++){
for(j=0;j<size;j++){
nsymeet1[j]=t1p_nsym_add(prbx1, IN);
t1p_aff_nsym_add(prbx1, tpmeet->paf[0], ptitv3[0][j], nsymeet1[j]);
}
for(j=0;j<size;j++){
t1p_aff_build(prbx1, tpmeet->paf[1], ptitv3[1][j], j);
}

itv_mul_num(a1->paf[0]->c, a1->paf[0]->c, num2);
itv_mul_num(a1->paf[1]->c, a1->paf[1]->c,num2);
itv_mul_num(a2->paf[0]->c, a2->paf[0]->c,num4);
itv_mul_num(a2->paf[1]->c, a2->paf[1]->c,num4);
itv_add(tpmeet->paf[0]->c,a1->paf[0]->c,a2->paf[0]->c);
itv_add(tpmeet->paf[1]->c,a1->paf[1]->c,a2->paf[1]->c);

itv_print(tpmeet->paf[0]->q->coeff);
itv_print(tpmeet->paf[0]->q->n->coeff);
itv_print(tpmeet->paf[0]->q->n->n->coeff);
itv_print(tpmeet->paf[0]->end->coeff);
itv_print(tpmeet->paf[1]->q->coeff);
itv_print(tpmeet->paf[1]->q->n->coeff);
itv_print(tpmeet->paf[1]->q->n->n->coeff);
itv_print(tpmeet->paf[1]->end->coeff);

    return tpmeet;
//}
}



    



//////////////////////// new implementation ///////////////////////////
    itv_t coeff;
    itv_init (coeff);
    num_t num;
    num_init (num);
    itv_t coeff1;
    itv_init (coeff1);
    num_t num1;
    num_init (num1);

    num_set_double (num, -1);
    itv_set_num (coeff, num);

    num_set_double (num1, 1);
    itv_set_num (coeff1, num1);

    size_t sum = 0;
    size_t i, j, k;
    double num2, num3;

    t1p_aaterm_t *p = t1p_aff_alloc_init (pr1);
    t1p_aaterm_t *ptr = t1p_aff_alloc_init (pr1);
    t1p_aaterm_t *diffc = t1p_aff_alloc_init (pr1);
    t1p_aaterm_t *exp1 = t1p_aff_alloc_init (pr1);
    t1p_aaterm_t *exp2 = t1p_aff_alloc_init (pr1);

    t1p_aaterm_t *ptmp1[100];	//= t1p_aff_alloc_init(pr1);
    t1p_aaterm_t *ptmp2[100];
    t1p_aaterm_t *lefteq = t1p_aff_alloc_init (pr1);
    t1p_aaterm_t *righteq = t1p_aff_alloc_init (pr1);
    t1p_aaterm_t *righteq1 = t1p_aff_alloc_init (pr1);
    t1p_aaterm_t *righteq2 = t1p_aff_alloc_init (pr1);
    t1p_aaterm_t *tmp = t1p_aff_alloc_init (pr1);

//// inequality's left part ///// for first generator

    p = tiles2->paf[0]->q;
//for (p=tiles2->paf[0]->q;p;) {
    for (k = 0; k < tiles2->paf[0]->l; k++) {
      for (i = 0; i < tiles2->dims; i++) {
	if (i == 0) {
	  p = tiles2->paf[0]->q;
	  if (k != 0) {
	    p = p->n;
	  }
	  itv_mul (pr1->itv, ptr->coeff, coeff1, p->coeff);
	  //itv_print(ptr->coeff);
	  itv_sub (diffc->coeff, tiles2->paf[1]->c, tiles1->paf[1]->c);
	  //itv_print(diffc->coeff);
	  itv_mul (pr1->itv, exp1->coeff, diffc->coeff, ptr->coeff);
	  //ptmp1[j]=t1p_aff_alloc_init(pr1);
	  ptmp1[i] = exp1;
	  printf ("%zu", i);
	  itv_print (ptmp1[i]->coeff);
	  printf ("%zu", i);
	}
	else {
	  p = tiles2->paf[1]->q;
	  if (k != 0) {
	    p = p->n;
	  }
	  //itv_print(ptmp1[0]->coeff);
	  itv_mul (pr1->itv, ptr->coeff, coeff, p->coeff);
	  //itv_print(ptr->coeff);
	  itv_sub (diffc->coeff, tiles2->paf[0]->c, tiles1->paf[0]->c);
	  //itv_print(diffc->coeff);
	  itv_mul (pr1->itv, exp2->coeff, diffc->coeff, ptr->coeff);
	  //ptmp2[j]=t1p_aff_alloc_init(pr1);
	  ptmp1[i] = exp2;
	  printf ("%zu", i);
	  itv_print (ptmp1[i]->coeff);
	  printf ("%zu", i);
	}
	//itv_print(ptr->coeff);

      }
//p = p->n;
      itv_add (lefteq->coeff, ptmp1[0]->coeff, ptmp1[1]->coeff);
      if (itv_is_neg (lefteq->coeff) == 1)
	itv_mul (pr1->itv, lefteq->coeff, coeff, lefteq->coeff);
      itv_print (lefteq->coeff);

      p = tiles2->paf[0]->q;
      for (i = 0; i < tiles2->dims; i++) {
	if (i == 0) {
	  p = tiles2->paf[1]->q;
	  if (k != 0) {
	    p = p->n;
	  }
	  itv_mul (pr1->itv, ptr->coeff, coeff1, p->coeff);
	  p = tiles2->paf[0]->q;
	  itv_mul (pr1->itv, exp1->coeff, p->coeff, ptr->coeff);
	  ptmp1[i] = exp1;
	  itv_print (ptmp1[i]->coeff);
	}
	else {
	  p = tiles2->paf[0]->q;
	  if (k != 0) {
	    p = p->n;
	  }
	  itv_mul (pr1->itv, ptr->coeff, coeff, p->coeff);
	  p = tiles2->paf[1]->q;
	  itv_mul (pr1->itv, exp2->coeff, p->coeff, ptr->coeff);
	  ptmp1[i] = exp2;
	  itv_print (ptmp1[i]->coeff);
	}
	//itv_print(ptr->coeff);

      }

      itv_add (righteq1->coeff, ptmp1[0]->coeff, ptmp1[1]->coeff);
      if (itv_is_neg (righteq1->coeff) == 1)
	itv_mul (pr1->itv, righteq1->coeff, coeff, righteq1->coeff);
      itv_print (righteq1->coeff);

      p = tiles2->paf[0]->q;
      for (i = 0; i < tiles2->dims; i++) {
	if (i == 0) {
	  p = tiles2->paf[1]->q;
	  if (k != 0) {
	    p = p->n;
	  }
	  itv_mul (pr1->itv, ptr->coeff, coeff, p->coeff);
	  p = tiles2->paf[0]->q;
	  p = p->n;
	  itv_mul (pr1->itv, exp1->coeff, p->coeff, ptr->coeff);
	  ptmp1[i] = exp1;
	  itv_print (ptmp1[i]->coeff);
	}
	else {
	  p = tiles2->paf[0]->q;
	  if (k != 0) {
	    p = p->n;
	  }
	  itv_mul (pr1->itv, ptr->coeff, coeff1, p->coeff);
	  p = tiles2->paf[1]->q;
	  p = p->n;
	  itv_mul (pr1->itv, exp2->coeff, p->coeff, ptr->coeff);
	  ptmp1[i] = exp2;
	  itv_print (ptmp1[i]->coeff);
	}
	//itv_print(ptr->coeff);

      }

      itv_add (tmp->coeff, ptmp1[0]->coeff, ptmp1[1]->coeff);
      if (itv_is_neg (tmp->coeff) == 1)
	itv_mul (pr1->itv, tmp->coeff, coeff, tmp->coeff);
      itv_add (righteq1->coeff, tmp->coeff, righteq1->coeff);
      itv_print (righteq1->coeff);

//////////////////////////////////////////////////////////////////////

      p = tiles1->paf[0]->q;
      for (i = 0; i < tiles2->dims; i++) {
	if (i == 0) {
	  p = tiles2->paf[1]->q;
	  if (k != 0) {
	    p = p->n;
	  }
	  itv_mul (pr1->itv, ptr->coeff, coeff1, p->coeff);
	  p = tiles1->paf[0]->q;
	  itv_mul (pr1->itv, exp1->coeff, p->coeff, ptr->coeff);
	  ptmp1[i] = exp1;
	  itv_print (ptmp1[i]->coeff);
	}
	else {
	  p = tiles2->paf[0]->q;
	  if (k != 0) {
	    p = p->n;
	  }
	  itv_mul (pr1->itv, ptr->coeff, coeff, p->coeff);
	  p = tiles1->paf[1]->q;
	  itv_mul (pr1->itv, exp2->coeff, p->coeff, ptr->coeff);
	  ptmp1[i] = exp2;
	  itv_print (ptmp1[i]->coeff);
	}
	//itv_print(ptr->coeff);

      }

      itv_add (righteq2->coeff, ptmp1[0]->coeff, ptmp1[1]->coeff);
      if (itv_is_neg (righteq2->coeff) == 1)
	itv_mul (pr1->itv, righteq2->coeff, coeff, righteq2->coeff);
      itv_print (righteq2->coeff);

      p = tiles1->paf[0]->q;
      for (i = 0; i < tiles2->dims; i++) {
	if (i == 0) {
	  p = tiles2->paf[1]->q;
	  if (k != 0) {
	    p = p->n;
	  }
	  itv_mul (pr1->itv, ptr->coeff, coeff, p->coeff);
	  p = tiles1->paf[0]->q;
	  p = p->n;
	  itv_mul (pr1->itv, exp1->coeff, p->coeff, ptr->coeff);
	  ptmp1[i] = exp1;
	  itv_print (ptmp1[i]->coeff);
	}
	else {
	  p = tiles2->paf[0]->q;
	  if (k != 0) {
	    p = p->n;
	  }
	  itv_mul (pr1->itv, ptr->coeff, coeff1, p->coeff);
	  p = tiles1->paf[1]->q;
	  p = p->n;
	  itv_mul (pr1->itv, exp2->coeff, p->coeff, ptr->coeff);
	  ptmp1[i] = exp2;
	  itv_print (ptmp1[i]->coeff);
	}
	//itv_print(ptr->coeff);

      }

      itv_add (tmp->coeff, ptmp1[0]->coeff, ptmp1[1]->coeff);
      if (itv_is_neg (tmp->coeff) == 1)
	itv_mul (pr1->itv, tmp->coeff, coeff, tmp->coeff);

      itv_add (righteq2->coeff, tmp->coeff, righteq2->coeff);
      itv_print (righteq2->coeff);

      itv_sub (righteq->coeff, righteq1->coeff, righteq2->coeff);
      itv_print (righteq->coeff);

//itv_print(lefteq->coeff);

      itv_magnitude (num, lefteq->coeff);
      double_set_num (&num2, num);
      if (itv_is_neg (lefteq->coeff) == 1)
	num2 = -1 * num2;

      itv_magnitude (num1, righteq->coeff);
      double_set_num (&num3, num1);
      if (itv_is_neg (righteq->coeff) == 1)
	num3 = -1 * num3;

/*if (num2 <= num3)
   sum++;
else
    break;*/


    }

/////////////////////////////////// old implementation ///////////////////////////

    /*arg_assert(a && b && (a->dims == b->dims), abort(););
       #ifdef _T1P_DEBUG
       fprintf(stdout, "### IS LESS or EQUAL %tx < %tx ###\n",(intptr_t)a,(intptr_t)b);
       //    t1p_fprint(stdout, man, a, 0x0);
       //   t1p_fprint(stdout, man, b, 0x0);
       fprintf(stdout, "### ### ###\n");
       #endif
       size_t i;
       bool ok;
       tbool_t res;

       man->result.flag_best = tbool_true;
       man->result.flag_exact = tbool_true;

       if (t1p_is_bottom(man, a) == tbool_true) res = tbool_true;
       else if (t1p_is_bottom(man, b) == tbool_true) res = tbool_false;
       else if (t1p_is_top(man, b) == tbool_true) res = tbool_true;
       else if  (t1p_is_top(man, a) == tbool_true) res = tbool_false;
       else if (t1p_is_eq(man, a, b)) res = tbool_true;
       else {
       // General case //
       ok = true;
       if (a->hypercube) {
       if (b->hypercube) {
       ok = true;
       } else {
       ok = false;
       }
       } else {
       if (b->hypercube) {
       ok = true;
       } else {
       // compare interval concretisations of constrained eps //
       size_t sizea = t1p_nsymcons_get_dimension(pr, a);
       size_t sizeb = t1p_nsymcons_get_dimension(pr, b);
       ap_dim_t dima = 0;
       ap_dim_t dimb = 0;
       for (i=0; i<sizea; i++)  {
       if(t1p_nsymcons_get_dimpos(pr, &dima, i, a)) {
       if (t1p_nsymcons_get_dimpos(pr, &dimb, i, b)) {
       if (ap_interval_is_leq(a->gamma[dima], b->gamma[dimb])) {
       ok &= true;
       } else {
       ok &= false;
       break;
       }
       } else {
       ok &= true;
       }
       } else {
       if (t1p_nsymcons_get_dimpos(pr, &dimb, i, b)) {
       ok &= false;
       break;
       } else {
       ok &= true;
       }
       }
       }
       }
       }
       if (ok) {
       for (i=0; i<a->dims; i++) {
       if (!itv_is_leq(a->box[i], b->box[i])) {
       ok = false;
       break;
       }
       else if (a->paf[i] != b->paf[i]) {
       itv_set(a->paf[i]->itv, a->box[i]);
       itv_set(b->paf[i]->itv, b->box[i]);
       ok &= t1p_aff_is_leq_constrained(pr, a->paf[i], b->paf[i], a, b);
       }
       // at the first occurence of "top" or "false" we no longer need to continue //
       //if (!ok) break;
       }
       }
       res = tbool_of_bool(ok);
       }
       #ifdef _T1P_DEBUG
       fprintf(stdout, "### RESULT of IS LESS or EQUAL ###\n");
       fprintf(stdout, "### %d ###\n",res);
       #endif */

////////////////////////////////////////// old implementation ///////////////////////////////
    return res;
    



//////////////////////// new implementation ///////////////////////////
    itv_t coeff;
    itv_init (coeff);
    num_t num;
    num_init (num);
    itv_t coeff1;
    itv_init (coeff1);
    num_t num1;
    num_init (num1);

    num_set_double (num, -1);
    itv_set_num (coeff, num);

    num_set_double (num1, 1);
    itv_set_num (coeff1, num1);

    size_t sum = 0;
    size_t i, j, k;
    double num2, num3;

    t1p_aaterm_t *p = t1p_aff_alloc_init (pr1);
    t1p_aaterm_t *ptr = t1p_aff_alloc_init (pr1);
    t1p_aaterm_t *diffc = t1p_aff_alloc_init (pr1);
    t1p_aaterm_t *exp1 = t1p_aff_alloc_init (pr1);
    t1p_aaterm_t *exp2 = t1p_aff_alloc_init (pr1);

    t1p_aaterm_t *ptmp1[100];	//= t1p_aff_alloc_init(pr1);
    t1p_aaterm_t *ptmp2[100];
    t1p_aaterm_t *lefteq = t1p_aff_alloc_init (pr1);
    t1p_aaterm_t *righteq = t1p_aff_alloc_init (pr1);
    t1p_aaterm_t *righteq1 = t1p_aff_alloc_init (pr1);
    t1p_aaterm_t *righteq2 = t1p_aff_alloc_init (pr1);
    t1p_aaterm_t *tmp = t1p_aff_alloc_init (pr1);

//// inequality's left part ///// for first generator

    p = tiles2->paf[0]->q;
//for (p=tiles2->paf[0]->q;p;) {
    for (k = 0; k < tiles2->paf[0]->l; k++) {
      for (i = 0; i < tiles2->dims; i++) {
	if (i == 0) {
	  p = tiles2->paf[0]->q;
	  if (k != 0) {
	    p = p->n;
	  }
	  itv_mul (pr1->itv, ptr->coeff, coeff1, p->coeff);
	  //itv_print(ptr->coeff);
	  itv_sub (diffc->coeff, tiles2->paf[1]->c, tiles1->paf[1]->c);
	  //itv_print(diffc->coeff);
	  itv_mul (pr1->itv, exp1->coeff, diffc->coeff, ptr->coeff);
	  //ptmp1[j]=t1p_aff_alloc_init(pr1);
	  ptmp1[i] = exp1;
	  printf ("%zu", i);
	  itv_print (ptmp1[i]->coeff);
	  printf ("%zu", i);
	}
	else {
	  p = tiles2->paf[1]->q;
	  if (k != 0) {
	    p = p->n;
	  }
	  //itv_print(ptmp1[0]->coeff);
	  itv_mul (pr1->itv, ptr->coeff, coeff, p->coeff);
	  //itv_print(ptr->coeff);
	  itv_sub (diffc->coeff, tiles2->paf[0]->c, tiles1->paf[0]->c);
	  //itv_print(diffc->coeff);
	  itv_mul (pr1->itv, exp2->coeff, diffc->coeff, ptr->coeff);
	  //ptmp2[j]=t1p_aff_alloc_init(pr1);
	  ptmp1[i] = exp2;
	  printf ("%zu", i);
	  itv_print (ptmp1[i]->coeff);
	  printf ("%zu", i);
	}
	//itv_print(ptr->coeff);

      }
//p = p->n;
      itv_add (lefteq->coeff, ptmp1[0]->coeff, ptmp1[1]->coeff);
      if (itv_is_neg (lefteq->coeff) == 1)
	itv_mul (pr1->itv, lefteq->coeff, coeff, lefteq->coeff);
      itv_print (lefteq->coeff);

      p = tiles2->paf[0]->q;
      for (i = 0; i < tiles2->dims; i++) {
	if (i == 0) {
	  p = tiles2->paf[1]->q;
	  if (k != 0) {
	    p = p->n;
	  }
	  itv_mul (pr1->itv, ptr->coeff, coeff1, p->coeff);
	  p = tiles2->paf[0]->q;
	  itv_mul (pr1->itv, exp1->coeff, p->coeff, ptr->coeff);
	  ptmp1[i] = exp1;
	  itv_print (ptmp1[i]->coeff);
	}
	else {
	  p = tiles2->paf[0]->q;
	  if (k != 0) {
	    p = p->n;
	  }
	  itv_mul (pr1->itv, ptr->coeff, coeff, p->coeff);
	  p = tiles2->paf[1]->q;
	  itv_mul (pr1->itv, exp2->coeff, p->coeff, ptr->coeff);
	  ptmp1[i] = exp2;
	  itv_print (ptmp1[i]->coeff);
	}
	//itv_print(ptr->coeff);

      }

      itv_add (righteq1->coeff, ptmp1[0]->coeff, ptmp1[1]->coeff);
      if (itv_is_neg (righteq1->coeff) == 1)
	itv_mul (pr1->itv, righteq1->coeff, coeff, righteq1->coeff);
      itv_print (righteq1->coeff);

      p = tiles2->paf[0]->q;
      for (i = 0; i < tiles2->dims; i++) {
	if (i == 0) {
	  p = tiles2->paf[1]->q;
	  if (k != 0) {
	    p = p->n;
	  }
	  itv_mul (pr1->itv, ptr->coeff, coeff, p->coeff);
	  p = tiles2->paf[0]->q;
	  p = p->n;
	  itv_mul (pr1->itv, exp1->coeff, p->coeff, ptr->coeff);
	  ptmp1[i] = exp1;
	  itv_print (ptmp1[i]->coeff);
	}
	else {
	  p = tiles2->paf[0]->q;
	  if (k != 0) {
	    p = p->n;
	  }
	  itv_mul (pr1->itv, ptr->coeff, coeff1, p->coeff);
	  p = tiles2->paf[1]->q;
	  p = p->n;
	  itv_mul (pr1->itv, exp2->coeff, p->coeff, ptr->coeff);
	  ptmp1[i] = exp2;
	  itv_print (ptmp1[i]->coeff);
	}
	//itv_print(ptr->coeff);

      }

      itv_add (tmp->coeff, ptmp1[0]->coeff, ptmp1[1]->coeff);
      if (itv_is_neg (tmp->coeff) == 1)
	itv_mul (pr1->itv, tmp->coeff, coeff, tmp->coeff);
      itv_add (righteq1->coeff, tmp->coeff, righteq1->coeff);
      itv_print (righteq1->coeff);

//////////////////////////////////////////////////////////////////////

      p = tiles1->paf[0]->q;
      for (i = 0; i < tiles2->dims; i++) {
	if (i == 0) {
	  p = tiles2->paf[1]->q;
	  if (k != 0) {
	    p = p->n;
	  }
	  itv_mul (pr1->itv, ptr->coeff, coeff1, p->coeff);
	  p = tiles1->paf[0]->q;
	  itv_mul (pr1->itv, exp1->coeff, p->coeff, ptr->coeff);
	  ptmp1[i] = exp1;
	  itv_print (ptmp1[i]->coeff);
	}
	else {
	  p = tiles2->paf[0]->q;
	  if (k != 0) {
	    p = p->n;
	  }
	  itv_mul (pr1->itv, ptr->coeff, coeff, p->coeff);
	  p = tiles1->paf[1]->q;
	  itv_mul (pr1->itv, exp2->coeff, p->coeff, ptr->coeff);
	  ptmp1[i] = exp2;
	  itv_print (ptmp1[i]->coeff);
	}
	//itv_print(ptr->coeff);

      }

      itv_add (righteq2->coeff, ptmp1[0]->coeff, ptmp1[1]->coeff);
      if (itv_is_neg (righteq2->coeff) == 1)
	itv_mul (pr1->itv, righteq2->coeff, coeff, righteq2->coeff);
      itv_print (righteq2->coeff);

      p = tiles1->paf[0]->q;
      for (i = 0; i < tiles2->dims; i++) {
	if (i == 0) {
	  p = tiles2->paf[1]->q;
	  if (k != 0) {
	    p = p->n;
	  }
	  itv_mul (pr1->itv, ptr->coeff, coeff, p->coeff);
	  p = tiles1->paf[0]->q;
	  p = p->n;
	  itv_mul (pr1->itv, exp1->coeff, p->coeff, ptr->coeff);
	  ptmp1[i] = exp1;
	  itv_print (ptmp1[i]->coeff);
	}
	else {
	  p = tiles2->paf[0]->q;
	  if (k != 0) {
	    p = p->n;
	  }
	  itv_mul (pr1->itv, ptr->coeff, coeff1, p->coeff);
	  p = tiles1->paf[1]->q;
	  p = p->n;
	  itv_mul (pr1->itv, exp2->coeff, p->coeff, ptr->coeff);
	  ptmp1[i] = exp2;
	  itv_print (ptmp1[i]->coeff);
	}
	//itv_print(ptr->coeff);

      }

      itv_add (tmp->coeff, ptmp1[0]->coeff, ptmp1[1]->coeff);
      if (itv_is_neg (tmp->coeff) == 1)
	itv_mul (pr1->itv, tmp->coeff, coeff, tmp->coeff);

      itv_add (righteq2->coeff, tmp->coeff, righteq2->coeff);
      itv_print (righteq2->coeff);

      itv_sub (righteq->coeff, righteq1->coeff, righteq2->coeff);
      itv_print (righteq->coeff);

//itv_print(lefteq->coeff);

      itv_magnitude (num, lefteq->coeff);
      double_set_num (&num2, num);
      if (itv_is_neg (lefteq->coeff) == 1)
	num2 = -1 * num2;

      itv_magnitude (num1, righteq->coeff);
      double_set_num (&num3, num1);
      if (itv_is_neg (righteq->coeff) == 1)
	num3 = -1 * num3;

/*if (num2 <= num3)
   sum++;
else
    break;*/


    }

/////////////////////////////////// old implementation ///////////////////////////

    /*arg_assert(a && b && (a->dims == b->dims), abort(););
       #ifdef _T1P_DEBUG
       fprintf(stdout, "### IS LESS or EQUAL %tx < %tx ###\n",(intptr_t)a,(intptr_t)b);
       //    t1p_fprint(stdout, man, a, 0x0);
       //   t1p_fprint(stdout, man, b, 0x0);
       fprintf(stdout, "### ### ###\n");
       #endif
       size_t i;
       bool ok;
       tbool_t res;

       man->result.flag_best = tbool_true;
       man->result.flag_exact = tbool_true;

       if (t1p_is_bottom(man, a) == tbool_true) res = tbool_true;
       else if (t1p_is_bottom(man, b) == tbool_true) res = tbool_false;
       else if (t1p_is_top(man, b) == tbool_true) res = tbool_true;
       else if  (t1p_is_top(man, a) == tbool_true) res = tbool_false;
       else if (t1p_is_eq(man, a, b)) res = tbool_true;
       else {
       // General case //
       ok = true;
       if (a->hypercube) {
       if (b->hypercube) {
       ok = true;
       } else {
       ok = false;
       }
       } else {
       if (b->hypercube) {
       ok = true;
       } else {
       // compare interval concretisations of constrained eps //
       size_t sizea = t1p_nsymcons_get_dimension(pr, a);
       size_t sizeb = t1p_nsymcons_get_dimension(pr, b);
       ap_dim_t dima = 0;
       ap_dim_t dimb = 0;
       for (i=0; i<sizea; i++)  {
       if(t1p_nsymcons_get_dimpos(pr, &dima, i, a)) {
       if (t1p_nsymcons_get_dimpos(pr, &dimb, i, b)) {
       if (ap_interval_is_leq(a->gamma[dima], b->gamma[dimb])) {
       ok &= true;
       } else {
       ok &= false;
       break;
       }
       } else {
       ok &= true;
       }
       } else {
       if (t1p_nsymcons_get_dimpos(pr, &dimb, i, b)) {
       ok &= false;
       break;
       } else {
       ok &= true;
       }
       }
       }
       }
       }
       if (ok) {
       for (i=0; i<a->dims; i++) {
       if (!itv_is_leq(a->box[i], b->box[i])) {
       ok = false;
       break;
       }
       else if (a->paf[i] != b->paf[i]) {
       itv_set(a->paf[i]->itv, a->box[i]);
       itv_set(b->paf[i]->itv, b->box[i]);
       ok &= t1p_aff_is_leq_constrained(pr, a->paf[i], b->paf[i], a, b);
       }
       // at the first occurence of "top" or "false" we no longer need to continue //
       //if (!ok) break;
       }
       }
       res = tbool_of_bool(ok);
       }
       #ifdef _T1P_DEBUG
       fprintf(stdout, "### RESULT of IS LESS or EQUAL ###\n");
       fprintf(stdout, "### %d ###\n",res);
       #endif */

////////////////////////////////////////// old implementation ///////////////////////////////
    return res;




CALL ();
  t1p_internal_t *prbx1 = t1p_init_from_manager (man, AP_FUNID_MEET);
  num_t num2;
  num_init (num2);
  num_set_double (num2, 0.4);
  num_t num4;
  num_init (num4);
  num_set_double (num4, 0.6);

  int size, size1, size2;

///////// first generator matrix ///////////////////

  itv_t **ptitv1 = (itv_t **) calloc (a1->dims, sizeof (itv_t *));
  for (i = 0; i < a1->dims; i++)
    ptitv1[i] = (itv_t *) calloc (prbx1->dim, sizeof (itv_t));

  size1 = t1p_aff_get_generator_matrix_size (prbx1, a1, ptitv1);

//printf("%u", size1);

  itv_t **ptitv2 = (itv_t **) calloc (a1->dims, sizeof (itv_t *));
  for (i = 0; i < a1->dims; i++)
    ptitv2[i] = (itv_t *) calloc (size1, sizeof (itv_t));

  t1p_aff_get_generator_matrix_num (prbx1, a1, ptitv1, ptitv2, num2);

//////////////// second generator matrix //////////////////

  itv_t **ptitv3 = (itv_t **) calloc (a2->dims, sizeof (itv_t *));
  for (i = 0; i < a2->dims; i++)
    ptitv3[i] = (itv_t *) calloc (prbx1->dim, sizeof (itv_t));

  size2 = t1p_aff_get_generator_matrix_size (prbx1, a2, ptitv3);

//printf("%u", size2);

  itv_t **ptitv4 = (itv_t **) calloc (a2->dims, sizeof (itv_t *));
  for (i = 0; i < a2->dims; i++)
    ptitv4[i] = (itv_t *) calloc (size2, sizeof (itv_t));

  t1p_aff_get_generator_matrix_num (prbx1, a2, ptitv3, ptitv4, num4);


  size = size1 + size2;

  itv_t **ptitv_meet = (itv_t **) calloc (a2->dims, sizeof (itv_t *));
  for (i = 0; i < a2->dims; i++)
    ptitv_meet[i] = (itv_t *) calloc (size, sizeof (itv_t));

/////////// fixed size buffer /////////////////

  //itv_t **ptitv_meet[a1->dims][size];

//printf("%u", size1);

//printf("%u", size2);

  //scanf("%f",&b);


  for (i = 0; i < a1->dims; i++) {
    for (j = 0; j < size; j++) {
      if (j >= (size1)) {
	itv_set (ptitv_meet[i][j], ptitv4[i][j - size1]);
	//itv_print(ptitv_meet[i][j]);
      }
      else {
	itv_set (ptitv_meet[i][j], ptitv2[i][j]);
	//itv_print(ptitv_meet[i][j]);
      }
      //itv_print(ptitv[i][j]);
    }
  }

  //scanf("%f",&b);

//itv_print(ptitv3[0][2]);

//int k=2*prbx1->dim;
//prbx1->dim=0;

//printf("%u",prbx1->dim);

  t1p_t *tpmeet = t1p_alloc (man, 0, 2);
  tpmeet->paf[0] = t1p_aff_alloc_init (prbx1);
  tpmeet->paf[1] = t1p_aff_alloc_init (prbx1);

  t1p_nsym_t *nsymeet1;		//[size];
//for (i=0;i<tb->dims;i++){
  for (j = 0; j < size; j++) {
    nsymeet1 = t1p_nsym_add (prbx1, IN);
    t1p_aff_nsym_add (prbx1, tpmeet->paf[0], ptitv_meet[0][j], nsymeet1);
  }
  for (j = 0; j < size; j++) {
    t1p_aff_build (prbx1, tpmeet->paf[1], ptitv_meet[1][j], j);
  }

  //printf ("%u", prbx1->dim);

  itv_t a1_centre1_paf0;
  itv_init (a1_centre1_paf0);
  itv_t a1_centre2_paf1;
  itv_init (a1_centre2_paf1);
  itv_t a2_centre1_paf0;
  itv_init (a2_centre1_paf0);
  itv_t a2_centre2_paf1;
  itv_init (a2_centre2_paf1);

  itv_mul_num (a1_centre1_paf0, a1->paf[0]->c, num2);
  itv_mul_num (a1_centre2_paf1, a1->paf[1]->c, num2);
  itv_mul_num (a2_centre1_paf0, a2->paf[0]->c, num4);
  itv_mul_num (a2_centre2_paf1, a2->paf[1]->c, num4);
  itv_add (tpmeet->paf[0]->c, a1_centre1_paf0, a2_centre1_paf0);
  itv_add (tpmeet->paf[1]->c, a1_centre2_paf1, a2_centre2_paf1);

//itv_print(tpmeet->paf[0]->q->coeff);
//printf("%u", tpmeet->paf[0]->q->pnsym->index);
//itv_print(tpmeet->paf[0]->q->n->coeff);
//itv_print(tpmeet->paf[0]->q->n->n->coeff);
//itv_print(tpmeet->paf[0]->end->coeff);
//printf("%u", tpmeet->paf[0]->end->pnsym->index);
//itv_print(tpmeet->paf[1]->q->coeff);
//printf("%u", tpmeet->paf[1]->q->pnsym->index);
//itv_print(tpmeet->paf[1]->q->n->coeff);
//itv_print(tpmeet->paf[1]->q->n->n->coeff);
//itv_print(tpmeet->paf[1]->end->coeff);
//printf("%u", tpmeet->paf[1]->end->pnsym->index);

  //itv_print (a1->paf[0]->q->coeff);

  free (ptitv1);
  free (ptitv2);
  free (ptitv3);
  free (ptitv4);
  free (ptitv_meet);

  return tpmeet;



////////////////// meet with GLPK ///////////////////// (working) ////////////////


///////////// intersection test using lp programming (GLPK)  /////////////
  int i, j,status;  
  double numfx1_glp,numfx2_glp;
  num_t num1;
  num_init (num1);
  itv_t *diffc = (itv_t *) calloc (2, sizeof (itv_t));
  for (i = 0; i < a1->dims; i++) {
      itv_init (diffc[i]);
      itv_sub (diffc[i], a2->paf[i]->c, a1->paf[i]->c);}
  
  itv_magnitude (num1, diffc[0]);
  double_set_num (&numfx1_glp, num1);
  if (itv_is_neg (diffc[0]) == 1)
     numfx1_glp = -1 * numfx1_glp;
  itv_magnitude (num1, diffc[1]);
  double_set_num (&numfx2_glp, num1);
  if (itv_is_neg (diffc[1]) == 1)
     numfx2_glp = -1 * numfx2_glp;
  
  glp_prob *lp;
  s1:   lp = glp_create_prob();
  s2:   glp_set_obj_dir(lp, GLP_MIN);
  s3:   glp_add_rows(lp, 2);
  s4:   glp_set_row_bnds(lp, 1, GLP_FX, numfx1_glp, numfx1_glp);
  s5:   glp_set_row_bnds(lp, 2, GLP_FX, numfx2_glp, numfx2_glp);

  printf("%f", numfx1_glp);
  printf("%f", numfx2_glp);

  CALL ();
  t1p_internal_t *prbx1 = t1p_init_from_manager (man, AP_FUNID_MEET);
  
  //num_t num2;
  //num_init (num2);
  //num_set_double (num2, 0.4);
  num_t num4;
  num_init (num4);
  num_set_double (num4, 1.0);

  int size, size1, size2;

  ///////// first generator matrix ///////////////////

  itv_t **ptitv1 = (itv_t **) calloc (a1->dims, sizeof (itv_t *));
  for (i = 0; i < a1->dims; i++)
    ptitv1[i] = (itv_t *) calloc (prbx1->dim, sizeof (itv_t));

  size1 = t1p_aff_get_generator_matrix_size (prbx1, a1, ptitv1);

  //printf("%u", size1);

  itv_t **ptitv2 = (itv_t **) calloc (a1->dims, sizeof (itv_t *));
  for (i = 0; i < a1->dims; i++)
    ptitv2[i] = (itv_t *) calloc (size1, sizeof (itv_t));

  t1p_aff_get_generator_matrix(prbx1, a1, ptitv1, ptitv2);

  //////////////// second generator matrix //////////////////

  itv_t **ptitv3 = (itv_t **) calloc (a2->dims, sizeof (itv_t *));
  for (i = 0; i < a2->dims; i++)
    ptitv3[i] = (itv_t *) calloc (prbx1->dim, sizeof (itv_t));

  size2 = t1p_aff_get_generator_matrix_size (prbx1, a2, ptitv3);

  //printf("%u", size2);

  itv_t **ptitv4 = (itv_t **) calloc (a2->dims, sizeof (itv_t *));
  for (i = 0; i < a2->dims; i++)
    ptitv4[i] = (itv_t *) calloc (size2, sizeof (itv_t));

  t1p_aff_get_generator_matrix_num (prbx1, a2, ptitv3, ptitv4, num4);


  size = size1 + size2;

  itv_t **ptitv_meet = (itv_t **) calloc (a2->dims, sizeof (itv_t *));
  for (i = 0; i < a2->dims; i++)
    ptitv_meet[i] = (itv_t *) calloc (size, sizeof (itv_t));

  for (i = 0; i < a1->dims; i++) {
    for (j = 0; j < size; j++) {
      if (j >= (size1)) {
	itv_set (ptitv_meet[i][j], ptitv4[i][j - size1]);
	//itv_print(ptitv_meet[i][j]);
      }
      else {
	itv_set (ptitv_meet[i][j], ptitv2[i][j]);
	//itv_print(ptitv_meet[i][j]);
      }
      //itv_print(ptitv[i][j]);
    }
  }

  s6:  glp_add_cols(lp, size);
  for (j = 0; j < size; j++) {
  s7:  glp_set_col_bnds(lp, j+1, GLP_DB, -1.0, 1.0);}
  
  int ia[1+1000], ja[1+1000];
  double *ar;
  ar = calloc(1+1000, sizeof(double));
  for (i = 0; i < a1->dims; i++) {
    for (j = 0; j < size; j++) {
        itv_magnitude (num1, ptitv_meet[i][j]);
        double_set_num (&numfx1_glp, num1);
        if (itv_is_neg (ptitv_meet[i][j]) == 1){
           numfx1_glp = -1 * numfx1_glp;}
        if (i==0){
           s8:  ia[1+j] = i+1, ja[1+j] = j+1, ar[1+j] =  numfx1_glp;
           printf("%f", ar[1+j]);}
        if (i==1){
           s9:  ia[1+j+size] = i+1, ja[1+j+size] = j+1, ar[1+j+size] =  numfx1_glp;
           printf("%f", ar[1+j+size]);}
    }
  }
  
  ////// 2*size because the dimension is 2 ///////////////
  s10:  glp_load_matrix(lp, 2*size, ia, ja, ar);
  s11:  glp_simplex(lp, NULL);
  s12:  status=glp_get_status(lp);

  printf("%u", status);
  
  if (status!=2 && status!=5){
     t1p_t* bot=t1p_bottom(man, 0, 2);
     s13: glp_delete_prob(lp);
     return bot;}
  else{
      num_t num2;
      num_init (num2);
      num_set_double (num2, 0.4);
      num_t num4;
      num_init (num4);
      num_set_double (num4, 0.6);
      t1p_aff_get_generator_matrix_num(prbx1, a1, ptitv1, ptitv2, num2);
      t1p_aff_get_generator_matrix_num (prbx1, a2, ptitv3, ptitv4, num4);
      for (i = 0; i < a1->dims; i++) {
         for (j = 0; j < size; j++) {
            if (j >= (size1)) {
	       itv_set (ptitv_meet[i][j], ptitv4[i][j - size1]);
	       //itv_print(ptitv_meet[i][j]);
             }
            else {
	       itv_set (ptitv_meet[i][j], ptitv2[i][j]);
	       //itv_print(ptitv_meet[i][j]);
             }
            //itv_print(ptitv[i][j]);
          }
       }
  
  //scanf("%f",&b);

//itv_print(ptitv3[0][2]);

//int k=2*prbx1->dim;
//prbx1->dim=0;

//printf("%u",prbx1->dim);

  t1p_t *tpmeet = t1p_alloc (man, 0, 2);
  tpmeet->paf[0] = t1p_aff_alloc_init (prbx1);
  tpmeet->paf[1] = t1p_aff_alloc_init (prbx1);

  t1p_nsym_t *nsymeet1;		//[size];
//for (i=0;i<tb->dims;i++){
  for (j = 0; j < size; j++) {
    nsymeet1 = t1p_nsym_add (prbx1, IN);
    t1p_aff_nsym_add (prbx1, tpmeet->paf[0], ptitv_meet[0][j], nsymeet1);
  }
  for (j = 0; j < size; j++) {
    t1p_aff_build (prbx1, tpmeet->paf[1], ptitv_meet[1][j], j);
  }

  //printf ("%u", prbx1->dim);

  itv_t a1_centre1_paf0;
  itv_init (a1_centre1_paf0);
  itv_t a1_centre2_paf1;
  itv_init (a1_centre2_paf1);
  itv_t a2_centre1_paf0;
  itv_init (a2_centre1_paf0);
  itv_t a2_centre2_paf1;
  itv_init (a2_centre2_paf1);

  itv_mul_num (a1_centre1_paf0, a1->paf[0]->c, num2);
  itv_mul_num (a1_centre2_paf1, a1->paf[1]->c, num2);
  itv_mul_num (a2_centre1_paf0, a2->paf[0]->c, num4);
  itv_mul_num (a2_centre2_paf1, a2->paf[1]->c, num4);
  itv_add (tpmeet->paf[0]->c, a1_centre1_paf0, a2_centre1_paf0);
  itv_add (tpmeet->paf[1]->c, a1_centre2_paf1, a2_centre2_paf1);

//itv_print(tpmeet->paf[0]->q->coeff);
//printf("%u", tpmeet->paf[0]->q->pnsym->index);
//itv_print(tpmeet->paf[0]->q->n->coeff);
//itv_print(tpmeet->paf[0]->q->n->n->coeff);
//itv_print(tpmeet->paf[0]->end->coeff);
//printf("%u", tpmeet->paf[0]->end->pnsym->index);
//itv_print(tpmeet->paf[1]->q->coeff);
//printf("%u", tpmeet->paf[1]->q->pnsym->index);
//itv_print(tpmeet->paf[1]->q->n->coeff);
//itv_print(tpmeet->paf[1]->q->n->n->coeff);
//itv_print(tpmeet->paf[1]->end->coeff);
//printf("%u", tpmeet->paf[1]->end->pnsym->index);

  //itv_print (a1->paf[0]->q->coeff);

  free (ptitv1);
  free (ptitv2);
  free (ptitv3);
  free (ptitv4);
  free (ptitv_meet);
  s14: glp_delete_prob(lp);

  return tpmeet;
} // else part 




//////////////////////// new meet //////////////////////////////


CALL ();
  t1p_internal_t *prbx1 = t1p_init_from_manager (man, AP_FUNID_MEET);
  #ifdef _T1P_DEBUG
    fprintf(stdout, "### MEET OPERANDS (destructive %d)###\n",destructive);
    t1p_fprint(stdout, man, a1, 0x0);
    t1p_fprint(stdout, man, a2, 0x0);
    fprintf(stdout, "### ### ###\n");
  #endif
  itv_t coeff;
  itv_init (coeff);
  num_t num;
  num_init (num);
  num_set_double (num, 0);
  itv_set_num (coeff, num);
  num_t num2;
  num_init (num2);
  num_set_double (num2, 0.4);
  num_t num4;
  num_init (num4);
  num_set_double (num4, 0.6);

  int i, j, size, size1, size2;

///////// first generator matrix ///////////////////

  itv_t **ptitv1 = (itv_t **) calloc (a1->dims, sizeof (itv_t *));
  for (i = 0; i < a1->dims; i++)
    ptitv1[i] = (itv_t *) calloc (prbx1->dim, sizeof (itv_t));

  size1 = t1p_aff_get_generator_matrix_size (prbx1, a1, ptitv1);

//printf("%u", size1);

  itv_t **ptitv2 = (itv_t **) calloc (a1->dims, sizeof (itv_t *));
  for (i = 0; i < a1->dims; i++)
    ptitv2[i] = (itv_t *) calloc (size1, sizeof (itv_t));

  t1p_aff_get_generator_matrix_num (prbx1, a1, ptitv1, ptitv2, num2);

//////////////// second generator matrix //////////////////

  itv_t **ptitv3 = (itv_t **) calloc (a2->dims, sizeof (itv_t *));
  for (i = 0; i < a2->dims; i++)
    ptitv3[i] = (itv_t *) calloc (prbx1->dim, sizeof (itv_t));

  size2 = t1p_aff_get_generator_matrix_size (prbx1, a2, ptitv3);

//printf("%u", size2);

  itv_t **ptitv4 = (itv_t **) calloc (a2->dims, sizeof (itv_t *));
  for (i = 0; i < a2->dims; i++)
    ptitv4[i] = (itv_t *) calloc (size2, sizeof (itv_t));

  t1p_aff_get_generator_matrix_num (prbx1, a2, ptitv3, ptitv4, num4);


  size = size1 + size2;

  itv_t **ptitv_meet = (itv_t **) calloc (a2->dims, sizeof (itv_t *));
  for (i = 0; i < a2->dims; i++)
    ptitv_meet[i] = (itv_t *) calloc (size, sizeof (itv_t));

/////////// fixed size buffer /////////////////

  //itv_t **ptitv_meet[a1->dims][size];

//printf("%u", size1);

//printf("%u", size2);

  //scanf("%f",&b);


  for (i = 0; i < a1->dims; i++) {
    for (j = 0; j < size; j++) {
      if (j >= (size1)) {
	itv_set (ptitv_meet[i][j], ptitv4[i][j - size1]);
	//itv_print(ptitv_meet[i][j]);
      }
      else {
	itv_set (ptitv_meet[i][j], ptitv2[i][j]);
	//itv_print(ptitv_meet[i][j]);
      }
      //itv_print(ptitv[i][j]);
    }
  }

  //scanf("%f",&b);

//itv_print(ptitv3[0][2]);

//int k=2*prbx1->dim;
//prbx1->dim=0;

//printf("%u",prbx1->dim);

  t1p_t *tpmeet = t1p_alloc (man, 0, 2);
  tpmeet->paf[0] = t1p_aff_alloc_init (prbx1);
  tpmeet->paf[1] = t1p_aff_alloc_init (prbx1);

  t1p_nsym_t *nsymeet1;		//[size];
  //for (i=0;i<tb->dims;i++){
  t1p_aaterm_t *p1 = NULL;
  p1 = a1->paf[0]->q;
  /*t1p_aaterm_t *p2 = NULL;
     p2=a2->paf[0]->q; */
  t1p_aaterm_t *p3 = NULL;
  p3 = a1->paf[1]->q;

  for (j = 0; j < size; j++) {
    if (j >= size1) {
      //if (p2 != NULL){
      //t1p_aff_build (prbx1, tpmeet->paf[0], ptitv_meet[0][j], p2->pnsym->index);
      nsymeet1 = t1p_nsym_add (prbx1, UN);  //// IN is for eps and UN is for eta
      t1p_aff_nsym_add (prbx1, tpmeet->paf[0], ptitv_meet[0][j], nsymeet1);	//////// creating new noise symbols ///////////
      //scanf("%f",&b);
      //printf("%u", prbx1->dim);
      //scanf("%f",&b);
      t1p_aff_build (prbx1, tpmeet->paf[1], ptitv_meet[1][j], prbx1->dim - 1);	//// using the index of the new noise symbols created above /////////////////
      //printf("%u", p2->pnsym->index);
      //p2=p2->n;}
    }
    else {
      if (p1 != NULL && itv_is_eq (ptitv_meet[0][j], coeff) == 0) {
	t1p_aff_build (prbx1, tpmeet->paf[0], ptitv_meet[0][j], p1->pnsym->index);
	//printf("%u", p1->pnsym->index);
	p1 = p1->n;
      }
      if (p3 != NULL && itv_is_eq (ptitv_meet[1][j], coeff) == 0) {
	t1p_aff_build (prbx1, tpmeet->paf[1], ptitv_meet[1][j], p3->pnsym->index);
	//printf("%u", p3->pnsym->index);
	p3 = p3->n;
      }
    }

    //nsymeet1 = t1p_nsym_add(prbx1, IN);
    //t1p_aff_nsym_add(prbx1, tpmeet->paf[0], ptitv_meet[0][j], nsymeet1);    //////// creating new noise symbols ///////////
    //scanf("%f",&b);
    //printf("%u", prbx1->dim);
    //scanf("%f",&b);
    //t1p_aff_build(prbx1, tpmeet->paf[1], ptitv_meet[1][j], prbx1->dim-1);  //// using the index of the new noise symbols created above /////////////////

    //t1p_aff_build (prbx1, tpmeet->paf[0], ptitv_meet[0][j], j);  //////////// creating new noise symbols but indexed from j= to size ///////////////// 
  }

  /*t1p_aaterm_t *p3 = NULL;
     p3=a1->paf[1]->q;
     /*t1p_aaterm_t *p4 = NULL;
     p4=a2->paf[1]->q; */

  //for (j = 0; j < size; j++) {
  //t1p_aff_build (prbx1, tpmeet->paf[1], ptitv_meet[1][j], j);
  /*if (j >= size1){
     if (p4 !=NULL){
     t1p_aff_build (prbx1, tpmeet->paf[1], ptitv_meet[1][j], p4->pnsym->index);
     printf("%u", p4->pnsym->index);
     p4=p4->n;}}
     else {
     if (p3 !=NULL){
     t1p_aff_build (prbx1, tpmeet->paf[1], ptitv_meet[1][j], p3->pnsym->index);
     printf("%u", p3->pnsym->index);
     p3=p3->n;}} */
  //}

  //printf ("%u", prbx1->dim);

  itv_t a1_centre1_paf0;
  itv_init (a1_centre1_paf0);
  itv_t a1_centre2_paf1;
  itv_init (a1_centre2_paf1);
  itv_t a2_centre1_paf0;
  itv_init (a2_centre1_paf0);
  itv_t a2_centre2_paf1;
  itv_init (a2_centre2_paf1);

  itv_mul_num (a1_centre1_paf0, a1->paf[0]->c, num2);
  itv_mul_num (a1_centre2_paf1, a1->paf[1]->c, num2);
  itv_mul_num (a2_centre1_paf0, a2->paf[0]->c, num4);
  itv_mul_num (a2_centre2_paf1, a2->paf[1]->c, num4);
  itv_add (tpmeet->paf[0]->c, a1_centre1_paf0, a2_centre1_paf0);
  itv_add (tpmeet->paf[1]->c, a1_centre2_paf1, a2_centre2_paf1);

  /* update tpmeet->box */  
  for (i=0; i<tpmeet->dims; i++){ 
      itv_meet(prbx1->itv, tpmeet->box[i], a1->box[i], a2->box[i]);
      itv_set(tpmeet->paf[i]->itv, tpmeet->box[i]);
      tpmeet->paf[i]->pby++;}

  //scanf("%f",&b);
  //itv_print(tpmeet->paf[1]->end->coeff);
  //printf("%u", tpmeet->paf[1]->end->pnsym->index);
  //scanf("%f",&b);
//itv_print(tpmeet->paf[0]->q->n->coeff);
//itv_print(tpmeet->paf[0]->q->n->n->coeff);
//itv_print(tpmeet->paf[0]->end->coeff);
//printf("%u", tpmeet->paf[0]->end->pnsym->index);
//itv_print(tpmeet->paf[1]->q->coeff);
//printf("%u", tpmeet->paf[1]->q->pnsym->index);
//itv_print(tpmeet->paf[1]->q->n->coeff);
//itv_print(tpmeet->paf[1]->q->n->n->coeff);
//itv_print(tpmeet->paf[1]->end->coeff);
//printf("%u", tpmeet->paf[1]->end->pnsym->index);

  //itv_print (a1->paf[0]->q->coeff);

  free (ptitv1);
  free (ptitv2);
  free (ptitv3);
  free (ptitv4);
  free (ptitv_meet);
  
  #ifdef _T1P_DEBUG
    fprintf(stdout, "### RESULT of MEET ###\n");
    t1p_fprint(stdout, man, tpmeet, 0x0);
    fprintf(stdout, "### ### ###\n");
  #endif

  return tpmeet;


